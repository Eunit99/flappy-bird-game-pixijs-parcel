{"mappings":"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","sources":["<anon>","src/js/app.js"],"sourcesContent":["var canvasWidthHeight = Math.min(Math.min(window.innerHeight, window.innerWidth), 512);\nvar GRAVITY = 9.8;\nvar GAME_SPEED_X = 40;\nvar BIRD_FRAME_LIST = [\n    \"./assets/images/frame-1.png\",\n    \"./assets/images/frame-2.png\",\n    \"./assets/images/frame-3.png\",\n    \"./assets/images/frame-4.png\"\n];\nvar TUBE_POS_LIST = [\n    canvasWidthHeight + 50,\n    canvasWidthHeight + 250,\n    canvasWidthHeight + 480\n];\nvar Bird = function() {\n    function Bird(stage, tubeList, onCollision) {\n        var _this = this;\n        this.tubeList = tubeList;\n        this.onCollision = onCollision;\n        this.speedY = 0;\n        this.sprite = new PIXI.Sprite();\n        this.textureCounter = 0;\n        this.updateTexture = function() {\n            if (_this.isDied) return;\n            _this.sprite.texture = PIXI.loader.resources[BIRD_FRAME_LIST[_this.textureCounter++]].texture;\n            if (_this.textureCounter === BIRD_FRAME_LIST.length) _this.textureCounter = 0;\n        };\n        this.updateSprite = function() {\n            _this.speedY += GRAVITY / 70;\n            _this.sprite.y += _this.speedY;\n            _this.sprite.rotation = Math.atan(_this.speedY / GAME_SPEED_X);\n            var isCollide = false;\n            var _a = _this.sprite, x = _a.x, y = _a.y, width = _a.width, height = _a.height;\n            _this.tubeList.forEach(function(d) {\n                if (d.checkCollision(x - width / 2, y - height / 2, width, height)) isCollide = true;\n            });\n            if (y < -height / 2 || y > canvasWidthHeight + height / 2) isCollide = true;\n            if (isCollide) {\n                _this.onCollision();\n                _this.isDied = true;\n            }\n        };\n        stage.addChild(this.sprite);\n        this.sprite.anchor.set(0.5, 0.5);\n        this.updateTexture();\n        this.sprite.scale.x = 0.06;\n        this.sprite.scale.y = 0.06;\n        this.reset();\n        document.addEventListener(\"keydown\", function(e) {\n            if (e.keyCode == 32) _this.addSpeed(-GRAVITY / 3);\n        });\n        stage.on(\"pointerdown\", function() {\n            return _this.addSpeed(-GRAVITY / 3);\n        });\n        setInterval(this.updateTexture, 200);\n    }\n    Bird.prototype.addSpeed = function(speedInc) {\n        this.speedY += speedInc;\n        this.speedY = Math.max(-GRAVITY, this.speedY);\n    };\n    Bird.prototype.reset = function() {\n        this.sprite.x = canvasWidthHeight / 6;\n        this.sprite.y = canvasWidthHeight / 2.5;\n        this.speedY = 0;\n        this.isDied = false;\n    };\n    return Bird;\n}();\nvar Tube = function() {\n    function Tube(stage, x) {\n        this.innerDistance = 80;\n        this.tubeWidth = 20;\n        this.sprite = new PIXI.Graphics();\n        stage.addChild(this.sprite);\n        this.reset(x);\n    }\n    Tube.prototype.reset = function(x) {\n        if (x === void 0) x = canvasWidthHeight + 20;\n        this.x = x;\n        var tubeMinHeight = 60;\n        var randomNum = Math.random() * (canvasWidthHeight - 2 * tubeMinHeight - this.innerDistance);\n        this.y = tubeMinHeight + randomNum;\n    };\n    Tube.prototype.checkCollision = function(x, y, width, height) {\n        if (!(x + width < this.x || this.x + this.tubeWidth < x || this.y < y)) return true;\n        if (!(x + width < this.x || this.x + this.tubeWidth < x || y + height < this.y + this.innerDistance)) return true;\n        return false;\n    };\n    Tube.prototype.update = function() {\n        this.x -= GAME_SPEED_X / 60;\n        if (this.x < -this.tubeWidth) this.reset();\n        this.sprite.clear();\n        this.sprite.beginFill(0xffffff, 1);\n        var _a = this, x = _a.x, y = _a.y, tubeWidth = _a.tubeWidth, innerDistance = _a.innerDistance;\n        this.sprite.drawRect(x, 0, tubeWidth, y);\n        this.sprite.drawRect(x, y + innerDistance, tubeWidth, canvasWidthHeight);\n        this.sprite.endFill();\n    };\n    return Tube;\n}();\nvar renderer = PIXI.autoDetectRenderer(canvasWidthHeight, canvasWidthHeight, {\n    backgroundColor: 0xc1c2c4\n});\ndocument.body.appendChild(renderer.view);\nvar stage = new PIXI.Container();\nstage.interactive = true;\nstage.hitArea = new PIXI.Rectangle(0, 0, 1000, 1000);\nrenderer.render(stage);\nvar tubeList = TUBE_POS_LIST.map(function(d) {\n    return new Tube(stage, d);\n});\nPIXI.loader.add(BIRD_FRAME_LIST).load(setup);\nvar bird;\nvar button = document.querySelector(\"#start\");\nfunction setup() {\n    bird = new Bird(stage, tubeList, function() {\n        // Called when bird hit tube/ground/upper bound\n        gameFailed = true;\n        button.classList.remove(\"hide\");\n    });\n    requestAnimationFrame(draw);\n}\nvar gameStarted = false;\nvar gameFailed = false;\nfunction draw() {\n    if (gameStarted) {\n        bird.updateSprite();\n        if (!gameFailed) tubeList.forEach(function(d) {\n            return d.update();\n        });\n    }\n    renderer.render(stage);\n    requestAnimationFrame(draw);\n}\nbutton.addEventListener(\"click\", function() {\n    gameStarted = true;\n    button.innerHTML = \"Retry\";\n    if (gameFailed) {\n        gameFailed = false;\n        tubeList.forEach(function(d, i) {\n            return d.reset(TUBE_POS_LIST[i]);\n        });\n        bird.reset();\n    }\n    button.classList.add(\"hide\");\n});\n\n//# sourceMappingURL=index.d141977f.js.map\n","var canvasWidthHeight = Math.min(Math.min(window.innerHeight, window.innerWidth), 512);\nvar GRAVITY = 9.8;\nvar GAME_SPEED_X = 40;\nvar BIRD_FRAME_LIST = [\n    './assets/images/frame-1.png',\n    './assets/images/frame-2.png',\n    './assets/images/frame-3.png',\n    './assets/images/frame-4.png',\n];\nvar TUBE_POS_LIST = [\n    canvasWidthHeight + 50,\n    canvasWidthHeight + 250,\n    canvasWidthHeight + 480\n];\nvar Bird = (function () {\n    function Bird(stage, tubeList, onCollision) {\n        var _this = this;\n        this.tubeList = tubeList;\n        this.onCollision = onCollision;\n        this.speedY = 0;\n        this.sprite = new PIXI.Sprite();\n        this.textureCounter = 0;\n        this.updateTexture = function () {\n            if (_this.isDied)\n                return;\n            _this.sprite.texture = PIXI.loader.resources[BIRD_FRAME_LIST[_this.textureCounter++]].texture;\n            if (_this.textureCounter === BIRD_FRAME_LIST.length)\n                _this.textureCounter = 0;\n        };\n        this.updateSprite = function () {\n            _this.speedY += GRAVITY / 70;\n            _this.sprite.y += _this.speedY;\n            _this.sprite.rotation = Math.atan(_this.speedY / GAME_SPEED_X);\n            var isCollide = false;\n            var _a = _this.sprite, x = _a.x, y = _a.y, width = _a.width, height = _a.height;\n            _this.tubeList.forEach(function (d) {\n                if (d.checkCollision(x - width / 2, y - height / 2, width, height))\n                    isCollide = true;\n            });\n            if (y < -height / 2 || y > canvasWidthHeight + height / 2)\n                isCollide = true;\n            if (isCollide) {\n                _this.onCollision();\n                _this.isDied = true;\n            }\n        };\n        stage.addChild(this.sprite);\n        this.sprite.anchor.set(0.5, 0.5);\n        this.updateTexture();\n        this.sprite.scale.x = 0.06;\n        this.sprite.scale.y = 0.06;\n        this.reset();\n        document.addEventListener('keydown', function (e) {\n            if (e.keyCode == 32)\n                _this.addSpeed(-GRAVITY / 3);\n        });\n        stage.on('pointerdown', function () { return _this.addSpeed(-GRAVITY / 3); });\n        setInterval(this.updateTexture, 200);\n    }\n    Bird.prototype.addSpeed = function (speedInc) {\n        this.speedY += speedInc;\n        this.speedY = Math.max(-GRAVITY, this.speedY);\n    };\n    Bird.prototype.reset = function () {\n        this.sprite.x = canvasWidthHeight / 6;\n        this.sprite.y = canvasWidthHeight / 2.5;\n        this.speedY = 0;\n        this.isDied = false;\n    };\n    return Bird;\n}());\nvar Tube = (function () {\n    function Tube(stage, x) {\n        this.innerDistance = 80;\n        this.tubeWidth = 20;\n        this.sprite = new PIXI.Graphics();\n        stage.addChild(this.sprite);\n        this.reset(x);\n    }\n    Tube.prototype.reset = function (x) {\n        if (x === void 0) { x = canvasWidthHeight + 20; }\n        this.x = x;\n        var tubeMinHeight = 60;\n        var randomNum = Math.random() * (canvasWidthHeight - 2 * tubeMinHeight - this.innerDistance);\n        this.y = tubeMinHeight + randomNum;\n    };\n    Tube.prototype.checkCollision = function (x, y, width, height) {\n        if (!(x + width < this.x || this.x + this.tubeWidth < x || this.y < y)) {\n            return true;\n        }\n        if (!(x + width < this.x || this.x + this.tubeWidth < x || y + height < this.y + this.innerDistance)) {\n            return true;\n        }\n        return false;\n    };\n    Tube.prototype.update = function () {\n        this.x -= GAME_SPEED_X / 60;\n        if (this.x < -this.tubeWidth)\n            this.reset();\n        this.sprite.clear();\n        this.sprite.beginFill(0xffffff, 1);\n        var _a = this, x = _a.x, y = _a.y, tubeWidth = _a.tubeWidth, innerDistance = _a.innerDistance;\n        this.sprite.drawRect(x, 0, tubeWidth, y);\n        this.sprite.drawRect(x, y + innerDistance, tubeWidth, canvasWidthHeight);\n        this.sprite.endFill();\n    };\n    return Tube;\n}());\nvar renderer = PIXI.autoDetectRenderer(canvasWidthHeight, canvasWidthHeight, { backgroundColor: 0xc1c2c4 });\ndocument.body.appendChild(renderer.view);\nvar stage = new PIXI.Container();\nstage.interactive = true;\nstage.hitArea = new PIXI.Rectangle(0, 0, 1000, 1000);\nrenderer.render(stage);\nvar tubeList = TUBE_POS_LIST.map(function (d) { return new Tube(stage, d); });\nPIXI.loader\n    .add(BIRD_FRAME_LIST)\n    .load(setup);\nvar bird;\nvar button = document.querySelector('#start');\nfunction setup() {\n    bird = new Bird(stage, tubeList, function () {\n        // Called when bird hit tube/ground/upper bound\n        gameFailed = true;\n        button.classList.remove('hide');\n    });\n    requestAnimationFrame(draw);\n}\nvar gameStarted = false;\nvar gameFailed = false;\nfunction draw() {\n    if (gameStarted) {\n        bird.updateSprite();\n        if (!gameFailed)\n            tubeList.forEach(function (d) { return d.update(); });\n    }\n    renderer.render(stage);\n    requestAnimationFrame(draw);\n}\nbutton.addEventListener('click', function () {\n    gameStarted = true;\n    button.innerHTML = 'Retry';\n    if (gameFailed) {\n        gameFailed = false;\n        tubeList.forEach(function (d, i) { return d.reset(TUBE_POS_LIST[i]); });\n        bird.reset();\n    }\n    button.classList.add('hide');\n});\n"],"names":["bird","canvasWidthHeight","Math","min","window","innerHeight","innerWidth","BIRD_FRAME_LIST","TUBE_POS_LIST","Bird","stage","tubeList","onCollision","_this","speedY","sprite","PIXI","Sprite","textureCounter","updateTexture","isDied","texture","loader","resources","length","updateSprite","GRAVITY","y","rotation","atan","isCollide","_a","x","width","height","forEach","d","checkCollision","addChild","anchor","set","scale","reset","document","addEventListener","e","keyCode","addSpeed","on","setInterval","prototype","speedInc","max","Tube","innerDistance","tubeWidth","Graphics","randomNum","random","tubeMinHeight","update","GAME_SPEED_X","clear","beginFill","drawRect","endFill","renderer","autoDetectRenderer","backgroundColor","body","appendChild","view","Container","interactive","hitArea","Rectangle","render","map","add","load","gameFailed","button","classList","remove","requestAnimationFrame","draw","querySelector","gameStarted","innerHTML","i"],"version":3,"file":"index.d141977f.js.map"}